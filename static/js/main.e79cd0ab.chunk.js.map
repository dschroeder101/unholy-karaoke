{"version":3,"sources":["audioPlayer/audio/bark.ogg","audioPlayer/audio/drip.ogg","audioPlayer/audio/glass.ogg","audioPlayer/audio/sonar.ogg","logo.svg","audioPlayer/AudioTrack.js","audioPlayer/TrackSelector.js","audioPlayer/AudioPlayerControls.js","audioPlayer/AudioPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AudioTrack","props","image","artist","trackName","Container","fluid","Col","Row","src","this","React","Component","TrackSelector","btns","tracks","map","ListGroup","Item","onClick","e","changeTrack","className","selectedTrack","AudioPlayerControls","playAudio","AudioPlayer","state","audioTracks","Bark","Drip","Glass","Sonar","console","log","play","track","setState","audioSources","file","ref","song","type","App","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e79cd0ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bark.65e13358.ogg\";","module.exports = __webpack_public_path__ + \"static/media/drip.db87ef57.ogg\";","module.exports = __webpack_public_path__ + \"static/media/glass.3f1c966c.ogg\";","module.exports = __webpack_public_path__ + \"static/media/sonar.e4b6d592.ogg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nclass AudioTrack extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.image = this.props.image;\n        this.artist = this.props.artist;\n        this.trackName = this.props.trackName;\n    }\n\n    render() {\n        return(\n            <Container fluid>\n                <Col>\n                    <Row>\n                        <img src={this.image}></img>\n                        <h3>{this.trackName} - {this.artist}</h3>\n                    </Row>\n                </Col>\n            </Container>\n        )\n    }\n}\n\nexport default AudioTrack;","import React from 'react';\nimport AudioTrack from './AudioTrack'\nimport { ListGroup } from 'react-bootstrap'\n\nclass TrackSelector extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const btns = this.props.tracks.map(([trackName, artist]) => {\n            return (\n                <ListGroup.Item \n                onClick={(e) => this.props.changeTrack(trackName)}\n                className={this.props.selectedTrack === trackName?\"active\":\"\"}>\n                    <AudioTrack trackName={trackName} artist={artist} />\n                </ListGroup.Item>\n            );\n        });\n        return <ListGroup>{btns}</ListGroup>\n    }\n}\n\nexport default TrackSelector;","import React from 'react'\n\nclass AudioPlayerControls extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"audioPlayerControls\">\n            <button className=\"audioPlayerBtn\" onClick={this.props.playAudio}>\n                Play!\n            </button>\n            <button className=\"audioPlayerBtn\">\n                Surprise me...\n            </button>\n        </div>\n        )\n    }\n}\n\nexport default AudioPlayerControls;","import React from 'react';\nimport Bark from './audio/bark.ogg';\nimport Drip from './audio/drip.ogg';\nimport Glass from './audio/glass.ogg';\nimport Sonar from './audio/sonar.ogg';\nimport TrackSelector from './TrackSelector'\nimport AudioPlayerControls from './AudioPlayerControls'\n\nclass AudioPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audioTracks: [\n                [\"Thunderstruck\", \"AC/DC\", Bark],\n                [\"Daughter\", \"Pearl Jam\", Drip],\n                [\"How You Remind Me\", \"Nickelback\", Glass],\n                [\"Billie Jean\", \"Michael Jackson\", Sonar]\n            ],\n            selectedTrack: \"Thunderstruck\"\n        };\n\n        this.playAudio = () => {\n            console.log(\"Playing track: \" + this.state.selectedTrack +\"...\")\n            this[this.state.selectedTrack].play();\n        }\n\n        this.changeTrack = track => {\n            console.log(\"Changing track to \" + track + \"...\")\n            this.setState({\n                selectedTrack: track\n            });\n        }   \n    }\n\n    render() {\n        const audioSources = this.state.audioTracks.map(track => {\n            const [trackName, , file] = track;\n            return (\n                <audio ref={song => { this[trackName] = song; }}>\n                    <source src={file} type=\"audio/ogg\"/>\n                </audio>\n            )\n        })\n\n        return (\n            <div>\n                {audioSources}\n                <TrackSelector selectedTrack={this.state.selectedTrack} changeTrack={this.changeTrack} tracks={this.state.audioTracks}/>\n                <AudioPlayerControls playAudio={this.playAudio}/>\n            </div>\n        )\n    }\n}\n\nexport default AudioPlayer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AudioPlayer from './audioPlayer/AudioPlayer';\nimport { Jumbotron } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Welcome to unholy-karaoke</h1>\n        <h3>All the hits, now in one convenient media player.</h3>\n        <div className=\"audioPlayer\">\n          <Jumbotron>\n            <AudioPlayer />\n          </Jumbotron>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}